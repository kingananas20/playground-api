use super::{Channel, CrateType, Edition, Mode};
use serde::{Deserialize, Serialize};

/// Request structure to execute Rust code on the playground.
///
/// Specifies compilation parameters and the source code to run.
#[derive(Debug, Clone, Serialize)]
pub struct ExecuteRequest {
    /// The Rust release channel to use (stable, beta, nightly).
    pub channel: Channel,

    /// The compilation mode: debug or release.
    pub mode: Mode,

    /// The Rust edition to compile and run with (2015, 2018, 2021, 2024).
    pub edition: Edition,

    /// The crate type: binary or library.
    #[serde(rename = "crateType")]
    pub crate_type: CrateType,

    /// Whether to include test code during execution.
    pub tests: bool,

    /// Whether to enable backtrace output on runtime errors.
    #[serde(default)]
    pub backtrace: bool,

    /// The Rust source code to compile and execute.
    pub code: String,
}

impl ExecuteRequest {
    /// Creates a new `ExecuteRequest`.
    ///
    /// # Arguments
    ///
    /// * `channel` - Rust release channel.
    /// * `mode` - Compilation mode (debug/release).
    /// * `edition` - Rust edition.
    /// * `crate_type` - Crate type (binary or library).
    /// * `tests` - Whether to run test code.
    /// * `backtrace` - Whether to enable backtraces.
    /// * `code` - Source code to execute.
    ///
    /// # Returns
    ///
    /// An `ExecuteRequest` initialized with the given parameters.
    pub fn new(
        channel: Channel,
        mode: Mode,
        edition: Edition,
        crate_type: CrateType,
        tests: bool,
        backtrace: bool,
        code: String,
    ) -> ExecuteRequest {
        ExecuteRequest {
            channel,
            mode,
            edition,
            crate_type,
            tests,
            backtrace,
            code,
        }
    }
}

/// Response structure returned after executing Rust code.
///
/// Contains execution success status, exit details, and output streams.
#[derive(Debug, Clone, Deserialize)]
pub struct ExecuteResponse {
    /// Indicates whether the execution was successful.
    pub success: bool,

    /// Details about the process exit (exit code, signals, etc.).
    #[serde(rename = "exitDetail")]
    pub exit_detail: String,

    /// Standard output generated by the program.
    pub stdout: String,

    /// Standard error output, including runtime errors and panics.
    pub stderr: String,
}
